# Author: Haobin Ni, 2018
# This contract manages a company's stock. Holders could buy, sell or trade their shares.

units: {
    currency_value: "Currency Value"
}

Transfer: event({_from: indexed(address), _to: indexed(address), _value: uint256(currency_value)})
Buy: event({_buyer: indexed(address), _buy_order: uint256(currency_value)})
Sell: event({_seller: indexed(address), _sell_order: uint256(currency_value)})
Pay: event({_vendor: indexed(address), _amount: wei_value})

company: IFL(address, this)
total_shares: IFL(uint256(currency_value), this)
price: IFL(uint256 (wei / currency_value), this)

holdings: IFL(uint256(currency_value)[address], this)

@public
@IFL_this
def __init__(_company: address, _total_shares: uint256(currency_value),
        initial_price: uint256(wei / currency_value) ):
    assert _total_shares > 0
    assert initial_price > 0
    self.company = _company
    self.total_shares = _total_shares
    self.price = initial_price
    self.holdings[self.company] = _total_shares

@public
@constant
@IFL_this
def stock_available() -> uint256(currency_value):
    return self.holdings[self.company]

@public
@payable
@IFL_this
def buy_stock():
    buy_order: uint256(currency_value) = msg.value / self.price
    assert self.stock_available() >= buy_order
    self.holdings[self.company] -= buy_order
    self.holdings[msg.sender] += buy_order
    log.Buy(msg.sender, buy_order)

@public
@constant
@IFL_this
def get_holding(_stockholder: address) -> uint256(currency_value):
    return self.holdings[_stockholder]

@public
@constant
@IFL_this
def cash() -> wei_value:
    return self.balance

@public
@IFL_this
def sell_stock(sell_order: uint256(currency_value)):
    assert sell_order > 0 
    assert self.get_holding(msg.sender) >= sell_order
    assert self.cash() >= (sell_order * self.price)
    self.holdings[msg.sender] -= sell_order
    self.holdings[self.company] += sell_order
    send(msg.sender, sell_order * self.price)
    log.Sell(msg.sender, sell_order)

@public
@IFL_this
def transfer_stock(receiver: address, transfer_order: uint256(currency_value)):
    assert transfer_order > 0 
    assert self.get_holding(msg.sender) >= transfer_order
    self.holdings[msg.sender] -= transfer_order
    self.holdings[receiver] += transfer_order
    log.Transfer(msg.sender, receiver, transfer_order)

@public
@IFL_this
def pay_bill(vendor: address, amount: wei_value):
    assert msg.sender == self.company
    assert self.cash() >= amount
    send(vendor, amount)
    log.Pay(vendor, amount)

@public
@constant
@IFL_this
def debt() -> wei_value:
    return (self.total_shares - self.holdings[self.company]) * self.price

@public
@constant
@IFL_this
def worth() -> wei_value:
    return self.cash() - self.debt()
